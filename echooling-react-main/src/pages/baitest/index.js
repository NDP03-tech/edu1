import React, { useState, useRef, useEffect } from 'react';
import ReadingSection from '../../components/Baitest/ReadingSection';
import WritingTask from '../../components/Baitest/Writing';
import SpeakingComponent from '../../components/Baitest/Speaking';
import UserForm from '../../components/Baitest/UserTestForm';
import Listening from '../../components/Baitest/Listening';
import './TestDetail.css';

const TestDetail = () => {
  const [formData, setFormData] = useState(null); // L∆∞u th√¥ng tin c√° nh√¢n
  const [writingEssay, setWritingEssay] = useState('');
  const [speakingVideoUrl, setSpeakingVideoUrl] = useState('');
  const [readingScore, setReadingScore] = useState(0);
  const [listeningScore, setListeningScore] = useState(0);
  const [timeLeft, setTimeLeft] = useState(130 * 60); // 130 ph√∫t (gi√¢y)
  const [isTestStarted, setIsTestStarted] = useState(false); // Ki·ªÉm so√°t tr·∫°ng th√°i b√†i test
  
  const formRef = useRef(null);

  // üî• Fix l·ªói: Th·ªùi gian kh√¥ng ch·∫°y
  useEffect(() => {
    if (!isTestStarted) return; // Ch·ªâ ch·∫°y khi b√†i test b·∫Øt ƒë·∫ßu

    const timer = setInterval(() => {
      setTimeLeft((prevTime) => {
        if (prevTime <= 1) {
          clearInterval(timer);
          alert('‚è≥ H·∫øt th·ªùi gian l√†m b√†i!');
          return 0;
        }
        return prevTime - 1;
      });
    }, 1000);

    return () => clearInterval(timer); // Cleanup khi unmount
  }, [isTestStarted]);

  const handleSubmit = () => {
    if (formRef.current) {
      formRef.current.handleSubmit({
        ...formData,
        writingEssay,
        speakingVideoUrl,
        readingScore,
        listeningScore,
        overall: ((listeningScore + readingScore) / 2).toFixed(1),
      });
    }
  };

  return (
    <div>
      <h2 className="text-center">TH√ç SINH ƒê∆Ø·ª¢C L√ÄM B√ÄI CH·ªà 1 L·∫¶N</h2>

      {/* Ch·ªâ hi·ªÉn th·ªã ƒë·ªìng h·ªì khi b√†i test b·∫Øt ƒë·∫ßu */}
      {isTestStarted && (
        <h3 className="fixed-timer">
          ‚è≥ Th·ªùi gian c√≤n l·∫°i: {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}
        </h3>
      )}

      {/* B∆∞·ªõc 1: N·∫øu ch∆∞a nh·∫≠p th√¥ng tin, hi·ªÉn th·ªã form */}
      {!formData ? (
        <UserForm
          ref={formRef}
          onFormComplete={(data) => {
            setFormData(data);
            setIsTestStarted(true); // üî• B·∫Øt ƒë·∫ßu b√†i test khi nh·∫≠p th√¥ng tin xong
          }}
        />
      ) : (
        <>
          {/* B∆∞·ªõc 2: Hi·ªÉn th·ªã b√†i test sau khi nh·∫≠p th√¥ng tin */}
          <Listening setBandScore={setListeningScore} />
          <ReadingSection setBandScore={setReadingScore} />
          <WritingTask setEssayState={setWritingEssay} />
          <SpeakingComponent setVideoUrl={setSpeakingVideoUrl} />

          {/* B∆∞·ªõc 3: Khi n·ªôp b√†i, g·ª≠i to√†n b·ªô d·ªØ li·ªáu */}
          <button onClick={handleSubmit} className="btn btn-danger w-100 mt-3">
            N·ªôp b√†i ngay
          </button>
        </>
      )}
    </div>
  );
};

export default TestDetail;
